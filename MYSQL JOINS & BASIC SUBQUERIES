/*JOINS, TABLES, AGGREGATIONS, INSERTS, BASIC SUBQUERIES, AND FILTERING OF DATA EXAMPLES BELOW.*/
/* Create table about the people and what they do here */
CREATE TABLE famous_people (id INTEGER         PRIMARY KEY AUTOINCREMENT,
    fullname TEXT,
    email TEXT,
    birthdate TEXT,
    friend_id INTEGER,
    location_id INTEGER);
    
/*Inserting data into my famous_people table*/  
INSERT INTO famous_people (fullname, email, birthdate, friend_id, location_id)
    VALUES ("Brandon Flowers", "flowers@gmail.com", "10/28/1994", 1, 2);
INSERT INTO famous_people (fullname, email, birthdate, friend_id, location_id)
    VALUES ("Laura Bailey", "Baileys@hotmail.com", "10/05/1992", 2, 2);
INSERT INTO famous_people (fullname, email, birthdate, friend_id, location_id)
    VALUES ("Arthas Menethil", "lichking@gmail.com", "12/31/1989", 3, 1);
INSERT INTO famous_people (fullname, email, birthdate, friend_id, location_id)
    VALUES ("Illidan Stormrage", "stormrage@aol.com", "09/04/1987", 4, 1);
INSERT INTO famous_people (fullname, email, birthdate, friend_id, location_id)
    VALUES ("Julian Casablancas", "thestrokes@hotmail.com", "12/31/1989", 5, 2);
    
/* Create a table showing the things famous people like to do */
CREATE TABLE hobbies (id INTEGER PRIMARY       KEY AUTOINCREMENT,
    hobby TEXT,
    hobby_id INTEGER);
/*Inserting my data into the hobbies table.*/  
INSERT INTO hobbies (hobby, hobby_id)
    VALUES ("Singing", 1);
INSERT INTO hobbies (hobby, hobby_id)
    VALUES ("Exploring", 2);
INSERT INTO hobbies (hobby, hobby_id)
    VALUES ("Napping", 3);
    
/* Create a table showing the locations for these famous people */    
CREATE TABLE locations (id INTEGER PRIMARY     KEY AUTOINCREMENT,
    place TEXT,
    weather TEXT);
    
/*Inserting my data into the locations table.*/    
INSERT INTO locations (place, weather) 
    VALUES ("Azeroth", "Sunny");
INSERT INTO locations (place, weather) 
    VALUES ("USA", "Cold");
INSERT INTO locations (place, weather)
    VALUES ("Canada", "Freezing");
    

/*Create a table showcasing the name and ID of a famous person and their age */
CREATE TABLE famous_friends (id INTEGER PRIMARY KEY AUTOINCREMENT,
    friend_name TEXT,
    friend_age INTEGER);
   
/*Inserting data into my famous_friends table.*/
INSERT INTO famous_friends (friend_name, friend_age)
    VALUES ("Patrick Seitz", 45);
INSERT INTO famous_friends  (friend_name, friend_age)
    VALUES ("Billy Bobby", 26);
INSERT INTO famous_friends  (friend_name, friend_age)
    VALUES ("Varian Wrynn", 44);


/* Where are the famous people from? Use a left join/outter join to return results in case locations is zero or null. */
SELECT famous_people.fullname, locations.place
FROM famous_people
LEFT JOIN locations
    ON famous_people.location_id = locations.id;
    
/* Join the famous people to their hobbies using an outter/left join to return all values including zeros and null. */
SELECT famous_people.id, famous_people.fullname, hobby_id, hobbies.hobby FROM famous_people
LEFT JOIN hobbies
    ON famous_people.id = hobbies.hobby_id;
    
/* Where are the famous people from AND how is the weather over there? Use an Inner Join. however, if there is no match then nothing will return. */
SELECT famous_people.fullname, locations.place, locations.weather
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id;

/* Who are the famous friends of the famous people? Join them together in a table. Some famous people might not have friends, so join with a left join to return zeros and nulls. */
SELECT famous_people.fullname, famous_friends.friend_name 
FROM famous_people
LEFT JOIN famous_friends
    ON famous_people.friend_id = famous_friends.id; 
/* Which famous person is from the USA and has a 26 year old friend? Inner join here as we only want to see a direct match. */
SELECT famous_people.fullname, locations.place AS famous_person_location, famous_friends.friend_name, famous_friends.friend_age
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id
INNER JOIN famous_friends
    ON famous_people.friend_id = famous_friends.id 
    WHERE famous_friends.friend_age = 26;
    
/* Which famous person is from Azeroth and has a 44 year old friend? Use an inner join as we want to see a direct match only. */
SELECT famous_people.fullname, locations.place AS famous_person_location, famous_friends.friend_name, famous_friends.friend_age
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id
INNER JOIN famous_friends
    ON famous_people.friend_id = famous_friends.id 
    WHERE famous_friends.friend_age = 44;

/*Aggregation/data filtering and SUBQUERY examples below!*/
/*How many famous people are on Azeroth?*/
SELECT COUNT(famous_people.fullname)
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id
WHERE locations.place LIKE '%Azeroth%';

/*How many famous people are in the USA?*/
SELECT COUNT(famous_people.fullname)
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id
WHERE locations.place = 'USA';

/*How many famous people are in the USA and experience cold weather? Hint: Use an inner join as we only want direct matches to populate in results.*/
SELECT COUNT(famous_people.fullname)
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id
WHERE locations.place = 'USA'
    AND locations.weather IN (SELECT locations.weather FROM locations WHERE locations.weather LIKE '%Cold%');

/*Count all the famous people who are Candian or who live in cold weather.*/
SELECT COUNT(famous_people.fullname)
FROM famous_people
INNER JOIN locations
    ON famous_people.location_id = locations.id
WHERE locations.place = 'Canada'
    OR locations.weather IN (SELECT locations.weather FROM locations WHERE locations.weather = 'Cold');
    

/* Travel Reimbursements - Accounts Payable Project - 2022. Creating my mothly travel reimbursement tables below and importing my Excel spreadsheets as CSV files. */
/* Create December 2022 Travel Reimbursement table in SQLite3 */
CREATE TABLE BIT_DB.December2022_Travel_Reimb (
employeeID INTEGER,
name VARCHAR,
unionID CHAR(4),
reimbursed VARCHAR,
destination_city VARCHAR,
travel_date VARCHAR, 
acctcode VARCHAR,
conference VARCHAR,
ticket INTEGER
);
/* Hint for viewers: ticket stands for airfare ticket; fee stands for Corporate Travel Management (CTM) agent processing fee; total is the ticket and fee combined. */

/* Function below used for deleting table if edits needed, then reuploaded by creating table again */
DROP TABLE IF EXISTS BIT_DB.December2022_Travel_Reimb; 

/* Testing my created table and imported csv file. */
SELECT * FROM December2022_Travel_Reimb;

/* Travel Reimbursements - Accounts Payable Project - 2022. Creating my mothly travel reimbursement tables below and importing my Excel spreadsheets as CSV files. */
/* Create April 2022 Travel Reimbursement table in SQLite3 */
CREATE TABLE BIT_DB.April2022_Travel_Reimb (
employeeID INTEGER,
name VARCHAR,
unionID CHAR(4),
reimbursed VARCHAR,
destination_city VARCHAR,
travel_date VARCHAR, 
acctcode VARCHAR,
conference VARCHAR,
ticket INTEGER
);
/* Hint for viewers: ticket stands for airfare ticket; fee stands for Corporate Travel Management (CTM) agent processing fee; total is the ticket and fee combined. */

/* Testing my created table and imported csv file. */
SELECT * FROM April2022_Travel_Reimb;

/* Function below used for deleting table if edits needed, then reuploaded by creating table again */
DROP TABLE IF EXISTS BIT_DB.April2022_Travel_Reimb; 

/* Creating my December 2022 Employee records table and importing csv file. */
CREATE TABLE December_Employee_Records (
employeeID INTEGER,
name VARCHAR,
email VARCHAR,
unionn CHAR(4),
unionID INTEGER
);

/*Testing my imported csv to make sure it imported correctly. */
SELECT * FROM December_Employee_Records;

/* Creating my April 2022 Employee records table and importing csv file. */
CREATE TABLE April_Employee_Records (
employeeID INTEGER,
name VARCHAR,
email VARCHAR,
unionn CHAR(4),
unionID INTEGER
);

/*Testing my imported csv to make sure it imported correctly. */
SELECT * FROM April_Employee_Records;

/* Creating my union rep table and importing csv. */
CREATE TABLE union_rep (
unionID INTEGER,
unionname CHAR(4),
rep_name VARCHAR,
rep_email VARCHAR
);

/*Testing my imported csv to make sure it imported correctly. */
SELECT * FROM union_rep;

/* Create an index to speed up the search queries of the data from the tables. */
CREATE INDEX dec_sales 
ON December2022_Travel_Reimb (
employeeID,
name,
unionID,
reimbursed,
destination_city,
travel_date, 
acctcode,
conference,
ticket);

CREATE INDEX apr_sales 
ON April2022_Travel_Reimb (
employeeID,
name,
unionID,
reimbursed,
destination_city,
travel_date, 
acctcode,
conference,
ticket);

/* Combine both the December and April 2022 travel reimbursement tables. */
/* To solve this, I will UNION ALL the data together. */
SELECT * FROM December2022_Travel_Reimb
UNION ALL
SELECT * FROM April2022_Travel_Reimb
ORDER BY employeeID;

/* Remove employee 281557, Whitney Ellersick from the December 2022 travel reimbursement table. */
DELETE FROM December2022_Travel_Reimb
WHERE (employeeID = 281557);
/* Remove employee 985837, Kate Wilkinson from the April2022_Travel_Reimb table; They are both duplicate reimbursements. Notified accounts payable... */
DELETE FROM April2022_Travel_Reimb
WHERE rowid = 63 AND 64;
/* Provide a query that serarches for employees with multiple reimbursements totaling over $200. */
/* To start, I will create a CTE and UNION all my reimbursements to make a single CTE out of the two travel reimbursement tables. */
WITH unioned_data as (
   SELECT
     employeeid,
     reimbursed
   FROM April2022_Travel_Reimb
 
    UNION ALL

    SELECT
     employeeid,
     reimbursed
   FROM December2022_Travel_Reimb
)
/* Calling my cte to perform aggregates on the data. */
SELECT
   employeeid,
   COUNT(*) as total_times_reimb,
   SUM(reimbursed) as total_reimbursed
FROM unioned_data
GROUP BY employeeID
HAVING COUNT(*) > 1
ORDER BY employeeID;

/* What is the total anount reimbursed, the average, min/max, and how many employees were reimbursed for December AND April 2022?
/* To start, I will create a CTE and UNION all my reimbursements to make a single CTE out of the two travel reimbursement tables. */
WITH unioned_data as (
   SELECT
     employeeid,
     reimbursed
   FROM April2022_Travel_Reimb
 
    UNION ALL

    SELECT
     employeeid,
     reimbursed
   FROM December2022_Travel_Reimb
)
/* Calling my cte to perform aggregates on the data. */
SELECT
     COUNT(*) as total_reimbursements,
   SUM(reimbursed),
   MIN(reimbursed),
   MAX(reimbursed),
   AVG(reimbursed)
FROM unioned_data;

/* Show which union each employee is a part of a long with their union rep, and email. Then, limk all of the data to the corresponding employee records for the month of December. */
/* To solve this, I will be joining multiple tables together on shared identifiers. */
SELECT der.employeeID,
der.name, 
COALESCE(NULLIF(der.email,''), 'NO EMAIL PROVIDED') AS email,
SUM(dtr.reimbursed) AS total_reimbursed,
COALESCE(NULLIF(der.unionn,''), 'No Union') AS union_name, 
COALESCE(NULLIF(der.unionID,''), 'N/A') AS union_ID,
ur.unionname,
ur.rep_name,
ur.rep_email
FROM December_Employee_Records der
/*Using left joins because some fields may be null or empty, and that's OK. */
LEFT JOIN December2022_Travel_Reimb dtr
ON der.employeeID = dtr.employeeID
LEFT JOIN union_rep ur
ON der.unionID = ur.unionID
GROUP BY der.employeeID;

/* Select ALL employees and their email, who were reimbursed over $200 and traveled to FL, DC, or CA in the April2022_Travel_Reimb table. Include their union rep and their contact info.  */
SELECT aer.employeeID,
aer.name, 
COALESCE(NULLIF(aer.email,''), 'NO EMAIL PROVIDED') AS email,
atr.reimbursed,
atr.travel_date,
atr.destination_city,
COALESCE(NULLIF(ur.unionID,''), 'N/A') AS unionID,
COALESCE(NULLIF(ur.unionname,''), 'NOT IN UNION') AS union_name,
COALESCE(NULLIF(ur.rep_name,''), 'N/A') AS rep_name,
COALESCE(NULLIF(ur.rep_email,''), 'N/A') AS rep_email
FROM April_Employee_Records aer
LEFT JOIN union_rep ur
ON aer.unionID = ur.unionID
LEFT JOIN April2022_Travel_Reimb atr
ON aer.employeeID = atr.employeeID
WHERE atr.destination_city LIKE '%FL' 
    OR (atr.destination_city LIKE '%CA')
    OR (atr.destination_city LIKE '%DC')
        AND (atr.reimbursed > 300);

/* Select ALL employees who were reimbursed under $900 and traveled from 05/01-10/28/2022? Rank(function) the reimbursements from greatest to least. Only use the December and April 2022 travel reimbursements for this exercise. */
/* First, I will create a UNION ALL to combine both the Aprill2022_Travel_Reimb and December2022_Travel_Reimb tables. */
WITH unioned_data AS (
   SELECT
     employeeid,
     reimbursed,
     destination_city,
     travel_date
   FROM April2022_Travel_Reimb
 
    UNION ALL

    SELECT
     employeeid,
     reimbursed,
     destination_city,
     travel_date
   FROM December2022_Travel_Reimb
)
SELECT employeeid,
destination_city,
travel_date,
reimbursed,
/* Rank windows function for reimbursements below... */
RANK() OVER (
    ORDER BY reimbursed desc) AS top_reimbursements
FROM unioned_data
/* Filtering by travel dates and reimbursement amount by using two subqueries. */
WHERE reimbursed = (
    SELECT reimbursed
    FROM unioned_data
    WHERE reimbursed < 900 AND
        (SELECT travel_date
         FROM unioned_data
          WHERE travel_date BETWEEN '05/01/2022' AND '10/28/2022'))
LIMIT 25;

/* Do any reimbursements EXIST for Los Angeles, CA for $300 or more? Include their union group. Also, the training dates must be during the month of January 2023. */
SELECT apr.employeeID, 
apr.name,
apr.reimbursed,
apr.destination_city,
apr.travel_date,
/*Filtering out blanks and NULL below. */
COALESCE(arecords.unionID, 'N/A') AS union_ID,
IFNULL(unionname, 'not enrolled') AS union_name,
/*Ranking my reimbursements from greatest to least with RANK windows function. */
RANK() OVER (
    ORDER BY apr.reimbursed desc) AS top_reimbursements
FROM April2022_Travel_Reimb apr
/* Left joining my tables together below. */
LEFT JOIN April_Employee_Records arecords
ON apr.employeeID = arecords.employeeID
LEFT JOIN union_rep urep
ON arecords.unionID = urep.unionID
/* Using EXIST operator in subquery to filter results. */
WHERE EXISTS 
    (SELECT apr.reimbursed FROM April2022_Travel_Reimb apr WHERE apr.reimbursed >= 300) AND
    EXISTS (SELECT apr.destination_city FROM April2022_Travel_Reimb apr WHERE apr.destination_city LIKE '%Los Angeles, CA%') AND
    EXISTS (SELECT apr.travel_date FROM April2022_Travel_Reimb apr WHERE apr.travel_date BETWEEN '01/01/2023' AND '01/31/2023');

/* Create a VIEW that reflects the most up to date edits of ALL travel reimbursement tables. */
CREATE VIEW SelectAllReimbursements AS
WITH unioned_data AS (
SELECT apr.employeeID,
apr.name,
apr.reimbursed,
apr.destination_city,
apr.travel_date
FROM April2022_Travel_Reimb apr
/* Combining my nearly identical December2022 and April2022 travel reimbursement tables with UNION ALL. */
UNION ALL

SELECT dec.employeeID,
dec.name,
dec.reimbursed,
dec.destination_city,
dec.travel_date
FROM December2022_Travel_Reimb dec
)
SELECT ud.employeeID,
ud.name,
ud.reimbursed,
ud.destination_city,
ud.travel_date
FROM unioned_data ud;
/* Confirming my VIEW works below! */
SELECT * FROM SelectAllReimbursements;

/* Create query showing all travel reimbursements.
Exclude trainings located in California amd Washington, DC, and provide employee emails with the reimbursements.*/
SELECT 
RANK () OVER (
    ORDER BY dec.reimbursed desc) AS top_reimbursements,
dec.employeeID,
dec.name,
dec.reimbursed,
IFNULL(drecords.email, 'N/A') AS employee_email,
IFNULL(urep.unionname, 'Not in Union') AS union_group,
dec.destination_city,
dec.travel_date
FROM December2022_Travel_Reimb dec
LEFT JOIN December_Employee_Records drecords
ON dec.employeeID = drecords.employeeID
LEFT JOIN union_rep urep
ON dec.unionID = urep.unionID
WHERE dec.reimbursed IN
    (SELECT dec.reimbursed
    FROM December2022_Travel_Reimb dec
    WHERE dec.destination_city NOT LIKE ('%CA%') AND dec.destination_city NOT LIKE ('%Washington, DC%'))
